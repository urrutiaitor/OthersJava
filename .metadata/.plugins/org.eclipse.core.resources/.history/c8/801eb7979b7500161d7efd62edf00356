import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.concurrent.Semaphore;

import pieces.Block;
import pieces.Piece;

public class Physics implements Runnable, ActionListener {

	ArrayList<Block> blockList = new ArrayList<>();
	Piece piece = null;
	long movePeriod = 1000;
	Semaphore semaphore = null;
	
	public Physics (long movePeriod, Semaphore semaphore) {
		this.movePeriod = movePeriod;
		this.semaphore = semaphore;
	}
	
	@Override
	public void run() {
		
		
		while (playerAlive()) loop();
	}

	private void loop() {
		while (pieceAlice()) move();
	}

	private void move() {
		try {
			semaphore.acquire();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		piece.
		
		semaphore.release();
	}

	private boolean pieceAlice() {
		// TODO Auto-generated method stub
		return false;
	}

	private boolean playerAlive() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
	}

}
