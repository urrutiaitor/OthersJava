import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.PixelInterleavedSampleModel;
import java.util.ArrayList;
import java.util.concurrent.Semaphore;

import pieces.Block;
import pieces.Piece;

public class Physics implements Runnable, KeyListener {

	ArrayList<Block> blockList = new ArrayList<>();
	Piece piece = null;
	long movePeriod = 1000;
	Semaphore semaphore = null;
	
	public Physics (long movePeriod, Semaphore semaphore) {
		this.movePeriod = movePeriod;
		this.semaphore = semaphore;
	}
	
	@Override
	public void run() {
		
		
		while (playerAlive()) loop();
	}

	private void loop() {
		while (pieceAlive()) move();
	}

	private void move() {
		try {
			semaphore.acquire();
			Thread.sleep(movePeriod);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		piece.move();
		
		semaphore.release();
	}

	private boolean playerAlive() {
		// TODO Auto-generated method stub
		return false;
	}
	
	private boolean pieceAlive() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void keyTyped(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
			if (piece.checkMove(blockList, 1)) piece.move(1);
		}
		
		if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			if (piece.checkMove(blockList, -1)) piece.move(-1);
		}
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

}
